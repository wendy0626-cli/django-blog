# Generated by Django 3.0.8 on 2022-06-27 13:49

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertising',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad_name', models.CharField(max_length=100, verbose_name='广告名称')),
                ('ad_url', models.URLField(max_length=225, verbose_name='广告链接')),
                ('img_url', models.ImageField(upload_to='ad/', verbose_name='广告图片')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否推广')),
            ],
            options={
                'verbose_name': '广告链接',
                'verbose_name_plural': '广告链接',
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='站点名称')),
                ('url', models.URLField(max_length=225, verbose_name='站点链接')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否展示')),
            ],
            options={
                'verbose_name': '友情链接',
                'verbose_name_plural': '友情链接',
            },
        ),
        migrations.CreateModel(
            name='SidebarMusic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server', models.CharField(choices=[('netease', '网易云音乐'), ('tencent', 'QQ音乐'), ('xiami', '虾米'), ('kugou', '酷狗')], default='netease', max_length=20, unique=True, verbose_name='平台')),
                ('mode', models.CharField(choices=[('random', '随机'), ('single', '单曲'), ('circulation', '列表循环'), ('order', '列表')], default='random', max_length=20, verbose_name='播放模式')),
                ('type', models.CharField(choices=[('song', '单曲'), ('album', '专辑'), ('playlist', '歌单'), ('search', '搜索')], default='playlist', max_length=20, verbose_name='类型')),
                ('play_id', models.BigIntegerField(verbose_name='播放歌单id')),
                ('home_url', models.URLField(blank=True, max_length=225, null=True, verbose_name='音乐主页')),
                ('autoplay', models.BooleanField(default=True, verbose_name='自动播放')),
                ('enable', models.BooleanField(default=True, verbose_name='启用插件')),
            ],
            options={
                'verbose_name': '侧边栏音乐配置',
                'verbose_name_plural': '侧边栏音乐配置',
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('sitename', '站点名称'), ('sitetitle', '站点标题'), ('email', '我的邮箱'), ('weibo', '微博主页'), ('music', '我的音乐主页'), ('twitter', 'Twitter'), ('github', 'GitHub'), ('beian', '备案号'), ('baidu_tj', '百度统计代码')], max_length=20, unique=True, verbose_name='名称')),
                ('value', models.TextField(verbose_name='值')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否展示')),
            ],
            options={
                'verbose_name': '站点设置',
                'verbose_name_plural': '站点设置',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='标签')),
            ],
            options={
                'verbose_name': '标签',
                'verbose_name_plural': '标签',
            },
        ),
        migrations.CreateModel(
            name='Tutorial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='教程')),
            ],
            options={
                'verbose_name': '教程',
                'verbose_name_plural': '教程',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('post', '博客文章'), ('about', '关于本站'), ('project', '我的项目')], default='post', max_length=20, verbose_name='类型')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='正文')),
                ('created_time', models.DateTimeField(verbose_name='创建时间')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('views', models.PositiveIntegerField(default=0, verbose_name='访问量')),
                ('is_top', models.BooleanField(default=False, verbose_name='顶置文章')),
                ('is_show', models.BooleanField(default=True, verbose_name='发布状态')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('tags', models.ManyToManyField(blank=True, to='blog.Tag', verbose_name='标签')),
                ('tutorial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Tutorial', verbose_name='教程')),
            ],
            options={
                'verbose_name': '博客文章',
                'verbose_name_plural': '博客文章',
                'ordering': ['-is_top', '-created_time'],
            },
        ),
    ]
